#!/bin/bash

# -*- mode: sh -*-

set +x

# Gotta clean out / strip single quotes for easy SQL usage.
action=$1
arg1=$(echo $2 | sed -e "s/'/''/g")
arg2=$(echo $3 | sed -e "s/'/''/g")
arg3=$(echo $4 | sed -e "s/'/''/g")

case $action in
    '-h')
        action=help
        ;;

    *help)
        action=help
        ;;

    *)
        ;;
esac

# Just pretty print out the docs.
doc_help () {
    # Header
    cat <<EOF
Wissen (v0.0.1)

Usage: wissen [-h | --help] <command> [<args>]

These are common wissen commands used in various situations:

EOF

    # Dynamically pull from database
    sqlite3 wissen.db <<EOF
.mode column
.width auto 200

SELECT '  ' || d.doc_name, d.doc
FROM doc d
JOIN topic t USING (topic_name, subject_name, system_name)
JOIN subject s USING (subject_name, system_name)
JOIN system sy USING (system_name)
WHERE d.system_name = 'wissen'
  AND d.subject_name = 'cli'
  AND d.topic_name = 'usage'
;
EOF

    # Footer
    cat <<EOF

Report bugs to: [ m@ahungry.com | https://github.com/ahungry/wissen ]
EOF

}

# Search
doc_apropos () {
    sqlite3 wissen.db <<EOF
.headers on
.mode line

SELECT COALESCE(sy.label, sy.system_name) AS system
  , COALESCE(s.label, s.subject_name) AS subject
  , COALESCE(t.label, t.topic_name) AS topic
  , COALESCE(d.label, d.doc_name) AS doc_name
  , d.doc
FROM doc d
JOIN topic t USING (topic_name, subject_name, system_name)
JOIN subject s USING (subject_name, system_name)
JOIN system sy USING (system_name)
WHERE 1=0
  -- Search on content
  OR d.doc LIKE '%$1%'
  OR t.doc LIKE '%$1%'
  OR s.doc LIKE '%$1%'
  OR sy.doc LIKE '%$1%'

  -- Search on labels
  OR d.label LIKE '%$1%'
  OR t.label LIKE '%$1%'
  OR s.label LIKE '%$1%'
  OR sy.label LIKE '%$1%'

  -- Search on labels
  OR d.doc_name LIKE '%$1%'
  OR t.topic_name LIKE '%$1%'
  OR s.subject_name LIKE '%$1%'
  OR sy.system_name LIKE '%$1%'

;
EOF
}

# Just pretty print out the list of docs.
doc_ls () {
    cols=$(expr $(tput cols) - 48)

    sqlite3 wissen.db <<EOF
.headers on
.mode column
-- .width 10 10 10 10 $cols

SELECT COALESCE(sy.label, sy.system_name) AS system
  , COALESCE(s.label, s.subject_name) AS subject
  , COALESCE(t.label, t.topic_name) AS topic
  , COALESCE(d.label, d.doc_name) AS doc_name
  , replace(replace(d.doc, char(10), ''), char(13), '') AS doc
FROM doc d
JOIN topic t USING (topic_name, subject_name, system_name)
JOIN subject s USING (subject_name, system_name)
JOIN system sy USING (system_name)
WHERE 1=0
  -- Search on labels
  OR d.label LIKE '%$1%'
  OR t.label LIKE '%$1%'
  OR s.label LIKE '%$1%'
  OR sy.label LIKE '%$1%'

  -- Search on labels
  OR d.doc_name LIKE '%$1%'
  OR t.topic_name LIKE '%$1%'
  OR s.subject_name LIKE '%$1%'
  OR sy.system_name LIKE '%$1%'

;
EOF
}

# Just a really simple way to inject user data we want.
doc_add () {
    # Clean up a bunch of useless stuff and make lower case.
    leaf=$(echo $1  | sed -e 's/#//g'  | tr '[A-Z]' '[a-z]')

    system=$(echo $leaf | cut -f1 -d'.')
    subject=$(echo $leaf | cut -f2 -d'.')
    topic=$(echo $leaf | cut -f3 -d'.')
    doc=$(echo $leaf | cut -f4 -d'.')

    doc_label=$(echo $2 | sed -e 's/^[ #]*//g')
    doc_doc=$3

    # We allow this to fail, so we don't have to check if the paths already exist.
    sqlite3 wissen.db 2>/dev/null <<EOF
--BEGIN;
INSERT INTO system (system_name, label, doc)
VALUES (trim('$system'), trim('$system'), trim('$doc_doc'));

INSERT INTO subject (system_name, subject_name, label, doc)
VALUES (trim('$system'), trim('$subject'), trim('$subject'), trim('$doc_doc'));

INSERT INTO topic (system_name, subject_name, topic_name, label, doc)
VALUES (trim('$system'), trim('$subject'), trim('$topic'), trim('$topic'), trim('$doc_doc'));

INSERT INTO doc (system_name, subject_name, topic_name, doc_name, label, doc)
VALUES (trim('$system'), trim('$subject'), trim('$topic'), trim('$doc'), trim('$doc_label'), trim('$doc_doc'));

--COMMIT;
EOF
}

doc_dir_import () {
    dir=$1
    depth=$2

    for d in `ls $dir`; do
        find $dir/$d -maxdepth ${depth:-2} -name '*.md' -exec ./bin/wissen import $d {} \;
    done
}

# Read a file line by line
doc_import () {
    system=$1
    filename=$2

    subject=''
    topic=''
    doc=''
    buf=''

    # Super basic markdown parser I guess
    while IFS='' read -r line || [[ -n "$line" ]]; do
        # TODO: Make the case matcher a variable (# for md, * for org etc.)
        case $line in
            '###'*)
                # Pretend we're writing out to file here...
                echo "$system.$subject.$topic.$doc $buf"
                [ -n "$buf" ] && doc_add "$system.$subject.$topic.$doc" "$doc" "$buf"
                buf=''
                doc=$line
                ;;

            '##'*)
                # Pretend we're writing out to file here...
                echo "$system.$subject.$topic.$doc $buf"
                [ -n "$buf" ] && doc_add "$system.$subject.$topic.$doc" "$doc" "$buf"
                buf=''
                doc=''
                topic=$line
                ;;

            '#'*)
                # Pretend we're writing out to file here...
                echo "$system.$subject.$topic.$doc $buf"
                [ -n "$buf" ] && doc_add "$system.$subject.$topic.$doc" "$doc" "$buf"
                buf=''
                doc=''
                topic=''
                subject=$line
                ;;

            # TODO: Need to add more levels of chaining - for now, system is just the user input
            # '#'*)
            #     # Pretend we're writing out to file here...
            #     echo "$system.$subject.$topic.$doc $buf"
            #     [ -n "$buf" ] && doc_add "$system.$subject.$topic.$doc" "$doc" "$buf"
            #     buf=''
            #     doc=''
            #     topic=''
            #     subject=''
            #     system=$line
            #     ;;

            *)
                buf=$(echo -e "$buf\n$line")
                ;;
        esac

        #echo "Text read from file: $line"
    done < "$filename"

    # Pretend we're writing out to file here...
    echo "$system.$subject.$topic.$doc $buf"
}

# Dynamically dispatch based on action.
if type doc_$action > /dev/null 2>&1; then
    doc_$action "$arg1" "$arg2" "$arg3"
else
    doc_help
    echo -e "\nInvalid command or option, please see usage above."
    exit 1
fi

exit 0
